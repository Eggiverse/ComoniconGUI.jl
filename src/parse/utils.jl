"""
    cachedir([file=Base.PROGRAM_FILE])

Return the cache directory.
"""
function cachedir(file = Base.PROGRAM_FILE)
    name, _ = splitext(basename(file))
    dir = joinpath(dirname(file), "." * name * ".poptart")
    isabspath(file) || return joinpath(pwd(), dir)
    return dir
end

"""
    cache_file([file=Base.PROGRAM_FILE])

Return the files that will be cached:

1. `cmd.jl`: a julia script that contains the generated CLI code.
2. `checksum`: a checksum file for checking if the generated CLI code matches the original file.
"""
function cachefile(file = Base.PROGRAM_FILE)
    dir = cachedir(file)
    return joinpath(dir, "poptart_gui.jl"), joinpath(dir, "checksum")
end


"""
    create_cache(cmd[, file=Base.PROGRAM_FILE])

Create cache for given command `cmd` at file location `file`.
"""
function create_cache(cmd, file = Base.PROGRAM_FILE)
    isempty(file) && return
    dir = cachedir(file)
    if !ispath(dir)
        mkpath(dir)
    end

    cache_file, crc = cachefile(file)
    open(cache_file, "w") do io
        gui_write(io, cmd)
    end
    write(crc, string(checksum(file), base = 16))
    return
end

"""
    write([io], cmd::EntryCommand)

Write the generated CLI script into a Julia script file. Default is the [`cachefile`](@ref).
"""
function gui_write(io::IO, x::EntryCommand)
    println(io, "#= generated by ComoniconGUI =#")
    main_code = prettify(codegen(x))
    if main_code.head == :block
        for arg in main_code.args
            println(io, arg)
        end
    else
        println(io, main_code)
    end
end